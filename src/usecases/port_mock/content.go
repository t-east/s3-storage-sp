// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecases/port/content.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"
	entities "sp/src/domains/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockContentInputPort is a mock of ContentInputPort interface.
type MockContentInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockContentInputPortMockRecorder
}

// MockContentInputPortMockRecorder is the mock recorder for MockContentInputPort.
type MockContentInputPortMockRecorder struct {
	mock *MockContentInputPort
}

// NewMockContentInputPort creates a new mock instance.
func NewMockContentInputPort(ctrl *gomock.Controller) *MockContentInputPort {
	mock := &MockContentInputPort{ctrl: ctrl}
	mock.recorder = &MockContentInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentInputPort) EXPECT() *MockContentInputPortMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockContentInputPort) FindAll() ([]*entities.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entities.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockContentInputPortMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockContentInputPort)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockContentInputPort) FindByID(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindByID", id)
}

// FindByID indicates an expected call of FindByID.
func (mr *MockContentInputPortMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockContentInputPort)(nil).FindByID), id)
}

// Upload mocks base method.
func (m *MockContentInputPort) Upload(content *entities.ContentIn, param *entities.Param) (*entities.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", content, param)
	ret0, _ := ret[0].(*entities.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockContentInputPortMockRecorder) Upload(content, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockContentInputPort)(nil).Upload), content, param)
}

// MockContentRepository is a mock of ContentRepository interface.
type MockContentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContentRepositoryMockRecorder
}

// MockContentRepositoryMockRecorder is the mock recorder for MockContentRepository.
type MockContentRepositoryMockRecorder struct {
	mock *MockContentRepository
}

// NewMockContentRepository creates a new mock instance.
func NewMockContentRepository(ctrl *gomock.Controller) *MockContentRepository {
	mock := &MockContentRepository{ctrl: ctrl}
	mock.recorder = &MockContentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentRepository) EXPECT() *MockContentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockContentRepository) All() ([]*entities.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entities.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockContentRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockContentRepository)(nil).All))
}

// Create mocks base method.
func (m *MockContentRepository) Create(user *entities.Content) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContentRepositoryMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContentRepository)(nil).Create), user)
}

// Find mocks base method.
func (m *MockContentRepository) Find(id string) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockContentRepositoryMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockContentRepository)(nil).Find), id)
}

// MockContentCrypt is a mock of ContentCrypt interface.
type MockContentCrypt struct {
	ctrl     *gomock.Controller
	recorder *MockContentCryptMockRecorder
}

// MockContentCryptMockRecorder is the mock recorder for MockContentCrypt.
type MockContentCryptMockRecorder struct {
	mock *MockContentCrypt
}

// NewMockContentCrypt creates a new mock instance.
func NewMockContentCrypt(ctrl *gomock.Controller) *MockContentCrypt {
	mock := &MockContentCrypt{ctrl: ctrl}
	mock.recorder = &MockContentCryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentCrypt) EXPECT() *MockContentCryptMockRecorder {
	return m.recorder
}

// ContentHashGen mocks base method.
func (m *MockContentCrypt) ContentHashGen(content *entities.Content) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentHashGen", content)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContentHashGen indicates an expected call of ContentHashGen.
func (mr *MockContentCryptMockRecorder) ContentHashGen(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentHashGen", reflect.TypeOf((*MockContentCrypt)(nil).ContentHashGen), content)
}

// MockContentContract is a mock of ContentContract interface.
type MockContentContract struct {
	ctrl     *gomock.Controller
	recorder *MockContentContractMockRecorder
}

// MockContentContractMockRecorder is the mock recorder for MockContentContract.
type MockContentContractMockRecorder struct {
	mock *MockContentContract
}

// NewMockContentContract creates a new mock instance.
func NewMockContentContract(ctrl *gomock.Controller) *MockContentContract {
	mock := &MockContentContract{ctrl: ctrl}
	mock.recorder = &MockContentContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentContract) EXPECT() *MockContentContractMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockContentContract) Get(id string) (*entities.ContentLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entities.ContentLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContentContractMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContentContract)(nil).Get), id)
}

// Set mocks base method.
func (m *MockContentContract) Set(content *entities.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockContentContractMockRecorder) Set(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockContentContract)(nil).Set), content)
}

// MockContentStorage is a mock of ContentStorage interface.
type MockContentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockContentStorageMockRecorder
}

// MockContentStorageMockRecorder is the mock recorder for MockContentStorage.
type MockContentStorageMockRecorder struct {
	mock *MockContentStorage
}

// NewMockContentStorage creates a new mock instance.
func NewMockContentStorage(ctrl *gomock.Controller) *MockContentStorage {
	mock := &MockContentStorage{ctrl: ctrl}
	mock.recorder = &MockContentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentStorage) EXPECT() *MockContentStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockContentStorage) Get(id string) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContentStorageMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContentStorage)(nil).Get), id)
}

// GetPreSignedURL mocks base method.
func (m *MockContentStorage) GetPreSignedURL(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreSignedURL", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreSignedURL indicates an expected call of GetPreSignedURL.
func (mr *MockContentStorageMockRecorder) GetPreSignedURL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreSignedURL", reflect.TypeOf((*MockContentStorage)(nil).GetPreSignedURL), key)
}

// Upload mocks base method.
func (m *MockContentStorage) Upload(content *entities.Content) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", content)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockContentStorageMockRecorder) Upload(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockContentStorage)(nil).Upload), content)
}
