// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecases/port/audit.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"
	entities "sp/src/domains/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockAuditInputPort is a mock of AuditInputPort interface.
type MockAuditInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockAuditInputPortMockRecorder
}

// MockAuditInputPortMockRecorder is the mock recorder for MockAuditInputPort.
type MockAuditInputPortMockRecorder struct {
	mock *MockAuditInputPort
}

// NewMockAuditInputPort creates a new mock instance.
func NewMockAuditInputPort(ctrl *gomock.Controller) *MockAuditInputPort {
	mock := &MockAuditInputPort{ctrl: ctrl}
	mock.recorder = &MockAuditInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditInputPort) EXPECT() *MockAuditInputPortMockRecorder {
	return m.recorder
}

// ProofGen mocks base method.
func (m *MockAuditInputPort) ProofGen() (*entities.Proofs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProofGen")
	ret0, _ := ret[0].(*entities.Proofs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProofGen indicates an expected call of ProofGen.
func (mr *MockAuditInputPortMockRecorder) ProofGen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProofGen", reflect.TypeOf((*MockAuditInputPort)(nil).ProofGen))
}

// MockAuditRepository is a mock of AuditRepository interface.
type MockAuditRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuditRepositoryMockRecorder
}

// MockAuditRepositoryMockRecorder is the mock recorder for MockAuditRepository.
type MockAuditRepositoryMockRecorder struct {
	mock *MockAuditRepository
}

// NewMockAuditRepository creates a new mock instance.
func NewMockAuditRepository(ctrl *gomock.Controller) *MockAuditRepository {
	mock := &MockAuditRepository{ctrl: ctrl}
	mock.recorder = &MockAuditRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditRepository) EXPECT() *MockAuditRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuditRepository) Create(proof *entities.Proof) (*entities.Proof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", proof)
	ret0, _ := ret[0].(*entities.Proof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuditRepositoryMockRecorder) Create(proof interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuditRepository)(nil).Create), proof)
}

// Update mocks base method.
func (m *MockAuditRepository) Update(proof *entities.Proof) (*entities.Proof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", proof)
	ret0, _ := ret[0].(*entities.Proof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAuditRepositoryMockRecorder) Update(proof interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuditRepository)(nil).Update), proof)
}

// MockAuditContract is a mock of AuditContract interface.
type MockAuditContract struct {
	ctrl     *gomock.Controller
	recorder *MockAuditContractMockRecorder
}

// MockAuditContractMockRecorder is the mock recorder for MockAuditContract.
type MockAuditContractMockRecorder struct {
	mock *MockAuditContract
}

// NewMockAuditContract creates a new mock instance.
func NewMockAuditContract(ctrl *gomock.Controller) *MockAuditContract {
	mock := &MockAuditContract{ctrl: ctrl}
	mock.recorder = &MockAuditContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditContract) EXPECT() *MockAuditContractMockRecorder {
	return m.recorder
}

// GetChallen mocks base method.
func (m *MockAuditContract) GetChallen(arg0 string) (*entities.Chal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallen", arg0)
	ret0, _ := ret[0].(*entities.Chal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallen indicates an expected call of GetChallen.
func (mr *MockAuditContractMockRecorder) GetChallen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallen", reflect.TypeOf((*MockAuditContract)(nil).GetChallen), arg0)
}

// GetContentLog mocks base method.
func (m *MockAuditContract) GetContentLog(arg0 string) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentLog", arg0)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentLog indicates an expected call of GetContentLog.
func (mr *MockAuditContractMockRecorder) GetContentLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentLog", reflect.TypeOf((*MockAuditContract)(nil).GetContentLog), arg0)
}

// RegisterProof mocks base method.
func (m *MockAuditContract) RegisterProof(content *entities.Proof) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterProof", content)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterProof indicates an expected call of RegisterProof.
func (mr *MockAuditContractMockRecorder) RegisterProof(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProof", reflect.TypeOf((*MockAuditContract)(nil).RegisterProof), content)
}

// MockAuditStorage is a mock of AuditStorage interface.
type MockAuditStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAuditStorageMockRecorder
}

// MockAuditStorageMockRecorder is the mock recorder for MockAuditStorage.
type MockAuditStorageMockRecorder struct {
	mock *MockAuditStorage
}

// NewMockAuditStorage creates a new mock instance.
func NewMockAuditStorage(ctrl *gomock.Controller) *MockAuditStorage {
	mock := &MockAuditStorage{ctrl: ctrl}
	mock.recorder = &MockAuditStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditStorage) EXPECT() *MockAuditStorageMockRecorder {
	return m.recorder
}

// GetContent mocks base method.
func (m *MockAuditStorage) GetContent(arg0 string) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", arg0)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockAuditStorageMockRecorder) GetContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockAuditStorage)(nil).GetContent), arg0)
}

// MockAuditCrypt is a mock of AuditCrypt interface.
type MockAuditCrypt struct {
	ctrl     *gomock.Controller
	recorder *MockAuditCryptMockRecorder
}

// MockAuditCryptMockRecorder is the mock recorder for MockAuditCrypt.
type MockAuditCryptMockRecorder struct {
	mock *MockAuditCrypt
}

// NewMockAuditCrypt creates a new mock instance.
func NewMockAuditCrypt(ctrl *gomock.Controller) *MockAuditCrypt {
	mock := &MockAuditCrypt{ctrl: ctrl}
	mock.recorder = &MockAuditCryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditCrypt) EXPECT() *MockAuditCryptMockRecorder {
	return m.recorder
}

// AuditProofGen mocks base method.
func (m *MockAuditCrypt) AuditProofGen(chal *entities.Chal, content, contentLog *entities.Content) (*entities.Proof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuditProofGen", chal, content, contentLog)
	ret0, _ := ret[0].(*entities.Proof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuditProofGen indicates an expected call of AuditProofGen.
func (mr *MockAuditCryptMockRecorder) AuditProofGen(chal, content, contentLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditProofGen", reflect.TypeOf((*MockAuditCrypt)(nil).AuditProofGen), chal, content, contentLog)
}
